Wed Sep 25 18:19:52 MST 2024
Initiating script
Results file already exists! continuing...
Loading required package: iterators
Loading required package: parallel
Linking to GEOS 3.9.5, GDAL 3.8.5, PROJ 9.4.0; sf_use_s2() is TRUE
Loading required package: sp

Attaching package: ‘raster’

The following objects are masked from ‘package:ctmm’:

    projection, projection<-

Loading required package: ade4
Loading required package: adehabitatMA
Registered S3 methods overwritten by 'adehabitatMA':
  method                       from
  print.SpatialPixelsDataFrame sp  
  print.SpatialPixels          sp  

Attaching package: ‘adehabitatMA’

The following object is masked from ‘package:raster’:

    buffer

Loading required package: adehabitatLT
Loading required package: CircStats
Loading required package: MASS

Attaching package: ‘MASS’

The following objects are masked from ‘package:raster’:

    area, select

Loading required package: boot
── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.4     ✔ readr     2.1.5
✔ forcats   1.0.0     ✔ stringr   1.5.1
✔ ggplot2   3.5.1     ✔ tibble    3.2.1
✔ lubridate 1.9.3     ✔ tidyr     1.3.1
✔ purrr     1.0.2     
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ purrr::accumulate() masks foreach::accumulate()
✖ ggplot2::annotate() masks ctmm::annotate()
✖ tidyr::extract()    masks raster::extract()
✖ dplyr::filter()     masks stats::filter()
✖ dplyr::id()         masks adehabitatLT::id()
✖ dplyr::lag()        masks stats::lag()
✖ dplyr::select()     masks MASS::select(), raster::select()
✖ purrr::when()       masks foreach::when()
ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors
[1] "/home/u15/mmercer3/proj/bobcat_chapter/results/Model_Fit_Results/Beverly_rr.Rda"
     [,1]                                
[1,] "Data loaded at 2024-09-25 18:20:03"
  |                                                                              |                                                                      |   0%  |                                                                              |=======                                                               |  10%  |                                                                              |==========                                                            |  15%  |                                                                              |==============                                                        |  20%  |                                                                              |==================                                                    |  25%  |                                                                              |=====================                                                 |  30%  |                                                                              |========================                                              |  35%  |                                                                              |============================                                          |  40%  |                                                                              |================================                                      |  45%  |                                                                              |===================================                                   |  50%  |                                                                              |======================================                                |  55%  |                                                                              |==========================================                            |  60%  |                                                                              |==============================================                        |  65%  |                                                                              |=================================================                     |  70%  |                                                                              |====================================================                  |  75%  |                                                                              |========================================================              |  80%  |                                                                              |============================================================          |  85%  |                                                                              |===============================================================       |  90%  |                                                                              |==================================================================    |  95%  |                                                                              |======================================================================| 100%
     [,1]                                            
[1,] "Speed function finished at 2024-09-25 18:26:00"
Estimating distance travelled on day1: 2022-11-10
  |                                                                              |                                                                      |   0%Error in if (any(INF) || any(ZERO)) { : 
  missing value where TRUE/FALSE needed
Calls: speed ... simulate -> simulate.ctmm -> smoother -> kalman -> PDfunc
In addition: Warning messages:
1: In cov.loglike(hess, grad) :
  MLE is near a boundary or optimizer failed.
2: In ctmm.fit(data_subset, CTMM = guess) :
  pREML failure: indefinite ML Hessian or divergent REML gradient.
3: In cov.loglike(DIFF$hessian, grad) :
  MLE is near a boundary or optimizer failed.
Execution halted
Script complete
Wed Sep 25 18:26:09 MST 2024
